// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HomeCrud.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PersonFeaturesFeature : Xunit.IClassFixture<PersonFeaturesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PersonFeatures.feature"
#line hidden
        
        public PersonFeaturesFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Person Features", "\tIn order to manage which person lives in a home\r\n\tAs a anonymous\r\n\tI want to be " +
                    "able to create, read, update and delete persons that lives in a home", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Person Peña\'s Home"});
            table1.AddRow(new string[] {
                        "Address",
                        "Test Address"});
#line 7
  testRunner.Given("I create one home with the following data", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        public virtual void SetFixture(PersonFeaturesFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Add person to home")]
        [Xunit.TraitAttribute("FeatureTitle", "Person Features")]
        [Xunit.TraitAttribute("Description", "Add person to home")]
        public virtual void AddPersonToHome()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add person to home", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "FirstName",
                        "Dawlin"});
            table2.AddRow(new string[] {
                        "LastName",
                        "Peña Luciano"});
            table2.AddRow(new string[] {
                        "Gender",
                        "Male"});
            table2.AddRow(new string[] {
                        "Identification",
                        "00128739281"});
#line 13
 testRunner.When("I add a person with the following data to the last added home", ((string)(null)), table2, "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "FirstName",
                        "Dawlin"});
            table3.AddRow(new string[] {
                        "LastName",
                        "Peña Luciano"});
            table3.AddRow(new string[] {
                        "Gender",
                        "Male"});
            table3.AddRow(new string[] {
                        "Identification",
                        "00128739281"});
            table3.AddRow(new string[] {
                        "Home",
                        "Person Peña\'s Home"});
#line 19
 testRunner.Then("the last person created should contain the following data", ((string)(null)), table3, "Then ");
#line 26
 testRunner.And("the last home created should contain a person with id \'00128739281\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PersonFeaturesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PersonFeaturesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
